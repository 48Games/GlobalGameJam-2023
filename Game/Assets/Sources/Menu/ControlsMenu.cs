//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Content/ControlsMenu.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlsMenu : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlsMenu()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlsMenu"",
    ""maps"": [
        {
            ""name"": ""PayerMenu"",
            ""id"": ""9f49db9c-ef54-4432-966c-e77cdf6149d9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""9b3edeaa-0121-47ea-97c3-7e2b4498637c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Validate"",
                    ""type"": ""Button"",
                    ""id"": ""b4d5371e-7cc4-470a-b810-ffa828a6d395"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""94e5b088-981a-4c8d-a83c-a452933be8c8"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1a7e8384-2cce-411e-989c-4fb793025f7c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ba48a536-247a-49ed-ae5b-af44e052bbf6"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboad and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aa2837b8-42b8-448e-91fc-832c8b189f54"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboad and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c87becb3-35dd-4c73-9237-103464acf901"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboad and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d7577648-6278-4e3a-91eb-77e51eeee609"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboad and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2d2bb25b-91d0-4dbd-8777-cc3ca0344185"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Validate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53f741ca-f623-4867-a406-dedcbcf00880"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboad and mouse"",
                    ""action"": ""Validate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b861d2a2-1152-4ad2-be2a-5d6e2309b3a5"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Validate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboad and mouse"",
            ""bindingGroup"": ""Keyboad and mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PayerMenu
        m_PayerMenu = asset.FindActionMap("PayerMenu", throwIfNotFound: true);
        m_PayerMenu_Move = m_PayerMenu.FindAction("Move", throwIfNotFound: true);
        m_PayerMenu_Validate = m_PayerMenu.FindAction("Validate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PayerMenu
    private readonly InputActionMap m_PayerMenu;
    private IPayerMenuActions m_PayerMenuActionsCallbackInterface;
    private readonly InputAction m_PayerMenu_Move;
    private readonly InputAction m_PayerMenu_Validate;
    public struct PayerMenuActions
    {
        private @ControlsMenu m_Wrapper;
        public PayerMenuActions(@ControlsMenu wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PayerMenu_Move;
        public InputAction @Validate => m_Wrapper.m_PayerMenu_Validate;
        public InputActionMap Get() { return m_Wrapper.m_PayerMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PayerMenuActions set) { return set.Get(); }
        public void SetCallbacks(IPayerMenuActions instance)
        {
            if (m_Wrapper.m_PayerMenuActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PayerMenuActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PayerMenuActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PayerMenuActionsCallbackInterface.OnMove;
                @Validate.started -= m_Wrapper.m_PayerMenuActionsCallbackInterface.OnValidate;
                @Validate.performed -= m_Wrapper.m_PayerMenuActionsCallbackInterface.OnValidate;
                @Validate.canceled -= m_Wrapper.m_PayerMenuActionsCallbackInterface.OnValidate;
            }
            m_Wrapper.m_PayerMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Validate.started += instance.OnValidate;
                @Validate.performed += instance.OnValidate;
                @Validate.canceled += instance.OnValidate;
            }
        }
    }
    public PayerMenuActions @PayerMenu => new PayerMenuActions(this);
    private int m_KeyboadandmouseSchemeIndex = -1;
    public InputControlScheme KeyboadandmouseScheme
    {
        get
        {
            if (m_KeyboadandmouseSchemeIndex == -1) m_KeyboadandmouseSchemeIndex = asset.FindControlSchemeIndex("Keyboad and mouse");
            return asset.controlSchemes[m_KeyboadandmouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPayerMenuActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnValidate(InputAction.CallbackContext context);
    }
}
